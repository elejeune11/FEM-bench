# Python Task: Write Pytest Tests for a Function

Below is the function you are testing. Use its signature and docstring to understand its behavior.

## Only complete the test functions below:
def element_distributed_load_quad8(face: int, node_coords: np.ndarray, traction: np.ndarray, num_gauss_pts: int) -> np.ndarray:
    """
    Assemble the consistent nodal load vector for a single edge of a Q8
    (8-node quadratic quadrilateral) under a constant traction and
    return it scattered into the full element DOF vector of length 16:
    [Fx1, Fy1, Fx2, Fy2, …, Fx8, Fy8].

    Traction model
    --------------
    `traction` is a constant Cauchy traction (force per unit physical
    edge length) applied along the current edge:
        traction = [t_x, t_y]  (shape (2,))

    Expected Q8 node ordering (must match `node_coords`)
    ----------------------------------------------------
        1:(-1,-1), 2:( 1,-1), 3:( 1, 1), 4:(-1, 1),
        5:( 0,-1), 6:( 1, 0), 7:( 0, 1), 8:(-1, 0)

    Face orientation & edge connectivity (start, mid, end)
    ------------------------------------------------------
        face=0 (bottom): (0, 4, 1)
        face=1 (right) : (1, 5, 2)
        face=2 (top)   : (2, 6, 3)
        face=3 (left)  : (3, 7, 0)
    The local edge parameter s runs from the start corner (s=-1) to the
    end corner (s=+1), with the mid-edge node at s=0.

    Parameters
    ----------
    face : {0,1,2,3}
        Which edge to load (bottom, right, top, left in the reference element).
    node_coords : (8,2) float array
        Physical coordinates of the Q8 nodes in the expected ordering above.
    traction : (2,) float array
        Constant Cauchy traction vector [t_x, t_y].
    num_gauss_pts : {1,2,3}
        1D Gauss–Legendre points on [-1,1]. (For straight edges,
        2-pt is exact with constant traction.)

    Returns
    -------
    r_elem : (16,) float array
        Element load vector in DOF order [Fx1, Fy1, Fx2, Fy2, …, Fx8, Fy8].
        Only the three edge nodes receive nonzero entries; others are zero.
    """

## Your Goal:
Write pytest-style test functions that verify the correctness of the function above.

## Requirements:
- Use the exact test function names listed below
- Each test must accept a single argument: `fcn` — the function to test
- Use `assert` statements to check correctness
- Each test must include a descriptive docstring
- Do not include print statements, logging, or example usage
- Output only valid Python code — no explanations, markdown, or comments

## Function Signature:
## Test Functions to Implement:
- test_edl_q8_analytic_straight_edges_total_force_scaled_all_faces: "Test that the traction integral works on straigt edge elements.
Set up straight edges on an 8 node quadrilateral element uniformly scaled by 2x.
For each face (0=bottom, 1=right, 2=top, 3=left), apply a constant Cauchy
traction t = [t_x, t_y].
Check two things:
1. The total force recovered from summing nodal contributions along the
loaded edge matches the applied traction times the physical edge length.
2. All nodes that are not on the loaded edge have zero load."
- test_edl_q8_constant_traction_total_force_on_curved_parabolic_edge: "Test the performance of curved edges.
Curved bottom edge (face=0) parameterized by s ∈ [-1, 1]:
    x(s) = s,  y(s) = c + k s^2  (parabola through the three edge nodes)
realized by placing 8 node quadrilateral edge nodes as:
    start = (-1, c+k),  mid = (0, c),  end = (1, c+k).

With a constant Cauchy traction t = [t_x, t_y], check that the total force equals
    [t_x, t_y] * L_exact,
where the exact arc length on [-1,1] is
    L_exact = sqrt(1+α) + asinh(sqrt(α)) / sqrt(α),   α = 4 k^2.

Note that the function integrates with 3-point Gauss–Legendre along the curved edge.
The integrand involves sqrt(1+α s^2), which is not a polynomial, so the
3-point rule is not exact. Select an appropriate relative tolerance to address this."

# Output:
# Only return valid pytest test functions — no prose, markdown, or commentary.
