# Python Task: Write Pytest Tests for a Function

Below is the function you are testing. Use its signature and docstring to understand its behavior.

## Only complete the test functions below:
def beam_transformation_matrix_3D(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, reference_vector: Optional[np.ndarray]) -> np.ndarray:
    """
    Compute the 12x12 transformation matrix Gamma for a 3D beam element.

    This transformation relates the element's local coordinate system to the global system:
        K_global = Gamma.T @ K_local @ Gamma
    where K_global is the global stiffness matrix and K_local is the local stiffness matrix.

    Parameters:
        x1, y1, z1 (float): Coordinates of the beam's start node in global space.
        x2, y2, z2 (float): Coordinates of the beam's end node in global space.
        reference_vector (np.ndarray of shape (3,), optional): A unit vector in global coordinates used to define
            the orientation of the local y-axis. The local y-axis is computed as the cross product
            of the reference vector and the local x-axis (beam axis). The local z-axis is then
            computed as the cross product of the local x-axis and the local y-axes.

            If not provided:
            - If the beam is aligned with the global z-axis, the global y-axis is used.
            - Otherwise, the global z-axis is used.

    Returns:
        Gamma (np.ndarray): A 12x12 local-to-global transformation matrix used to transform
            stiffness matrices, displacements, and forces. It is composed of four repeated
            3x3 direction cosine submatrices along the diagonal.

    Raises:
        ValueError: If `reference_vector` is not a unit vector.
        ValueError: If `reference_vector` is parallel to the beam axis.
        ValueError: If the `reference_vector` doesn't have shape (3,).
        ValueError: If the beam has zero length (start and end nodes coincide).

    Notes:
        All vectors must be specified in a right-handed global Cartesian coordinate system.
    """

## Your Goal:
Write pytest-style test functions that verify the correctness of the function above.

## Requirements:
- Use the exact test function names listed below
- Each test must accept a single argument: `fcn` — the function to test
- Use `assert` statements to check correctness
- Each test must include a descriptive docstring
- Do not include print statements, logging, or example usage
- Output only valid Python code — no explanations, markdown, or comments

## Function Signature:
## Test Functions to Implement:
- test_cardinal_axis_alignment: "Test transformation matrices for beams aligned with global coordinate axes.

Verifies that the 3x3 direction cosine matrix (first block of the 12x12 transformation
matrix) has the expected orientation for beams aligned with each cardinal direction.

The expected orientations are determined by:
- local_x: beam direction (normalized)
- reference_vector: global z-axis for non-vertical beams, global y-axis for vertical beams
- local_y: cross(reference_vector, local_x), normalized
- local_z: cross(local_x, local_y), normalized

Test cases:
- X-axis beam, use global z-axis as reference vector.
- Y-axis beam, use global z-axis as reference vector.
- Z-axis beam, use global y-axis as reference vector due to vertical beam logic."
- test_transformation_matrix_properties: "Test fundamental mathematical properties of transformation matrices for multiple beam configurations.
Test specific examples with known behavior and verifies that the tranformation is correct."
- test_beam_transformation_matrix_error_messages: "Test that the function raises appropriate ValueError exceptions for invalid reference vectors.
Verifies proper error handling for two invalid reference vector conditions:
1. Non-unit vector: When the reference vector's magnitude is not equal to 1.0
2. Parallel reference vector: When the reference vector is parallel to the beam axis
    - This would result in a zero cross product, making it impossible to define orthogonal local y and z axes
Also veriefies proper error handling for:
3. Zero-length beam: start and end coordinates are identical
All conditions should raise ValueError"

# Output:
# Only return valid pytest test functions — no prose, markdown, or commentary.
