# Python Task: Write Pytest Tests for a Function

Below is the function you are testing. Use its signature and docstring to understand its behavior.

## Only complete the test functions below:
def triangle_quadrature_2D(num_pts: int) -> Tuple[np.ndarray, np.ndarray]:
    """
    Return quadrature points and weights for numerical integration
    over the reference triangle T = {(x,y): x>=0, y>=0, x+y<=1}.

    Supported rules:
    - 1-point (degree-1 exact): centroid.
    - 3-point (degree-2 exact): permutations of (1/6, 1/6).
    - 4-point (degree-3 exact): centroid + permutations of (0.6, 0.2).

    Parameters
    ----------
    num_pts : int
        Number of quadrature points (1, 3, or 4).

    Returns
    -------
    points : (num_pts, 2) ndarray of float64
        Quadrature points (xi, eta). The third barycentric coordinate is 1 - xi - eta.
    weights : (num_pts,) ndarray of float64
        Quadrature weights. The sum of weights equals the area of the reference triangle (1/2).

    Raises
    ------
    ValueError
        If `num_pts` is not 1, 3, or 4.
    """

## Your Goal:
Write pytest-style test functions that verify the correctness of the function above.

## Requirements:
- Use the exact test function names listed below
- Each test must accept a single argument: `fcn` — the function to test
- Use `assert` statements to check correctness
- Each test must include a descriptive docstring
- Do not include print statements, logging, or example usage
- Output only valid Python code — no explanations, markdown, or comments

## Function Signature:
## Test Functions to Implement:
- test_triangle_quadrature_2D_invalid_inputs: "Test that triangle_quadrature_2D rejects invalid numbers of points.

The quadrature rule only supports 1, 3, or 4 integration points.
Any other request should raise a ValueError."
- test_triangle_quadrature_2D_basics: "Test basic structural properties of the quadrature rule.

For each supported rule (1, 3, 4 points):
- The returned points and weights arrays have the correct shapes and dtypes.
- The weights sum to 1/2, which is the exact area of the reference triangle.
- All quadrature points lie inside the reference triangle, i.e.
  x >= 0, y >= 0, and x + y <= 1."
- test_triangle_quadrature_2D_degree_exactness_1pt: "Accuracy of the 1-point centroid rule.

This rule is exact for total degree ≤ 1. We verify exactness on monomials {1, x, y},
then demonstrate non-exactness on representative quadratic monomials {x^2, xy, y^2}.
Exact integral over the reference triangle T is: ∫ x^p y^q dx dy = p! q! / (p+q+2)!."
- test_triangle_quadrature_2D_degree_exactness_3pt: "Accuracy of the classic 3-point rule.

This rule is exact for total degree ≤ 2. We verify exactness on monomials
{1, x, y, x^2, xy, y^2}, then demonstrate non-exactness on representative
cubic monomials {x^3, x^2 y, x y^2, y^3}.
Exact integral over T: ∫ x^p y^q dx dy = p! q! / (p+q+2)!."
- test_triangle_quadrature_2D_degree_exactness_4pt: "Accuracy of the 4-point rule.

This rule is exact for total degree ≤ 3. We verify exactness on all monomials with p+q ≤ 3,
then demonstrate non-exactness on representative quartic monomials {x^4, x^3 y, x^2 y^2, x y^3, y^4}.
Exact integral over T: ∫ x^p y^q dx dy = p! q! / (p+q+2)!."

# Output:
# Only return valid pytest test functions — no prose, markdown, or commentary.
