# Python Task: Write Pytest Tests for a Function

Below is the function you are testing. Use its signature and docstring to understand its behavior.

## Only complete the test functions below:
def linear_solve(P_global, K_global, fixed, free):
    """
    Solves the linear system for displacements and internal nodal forces in a 3D linear elastic structure,
    using a partitioned approach based on fixed and free degrees of freedom (DOFs).

    The function solves for displacements at the free DOFs by inverting the corresponding submatrix
    of the global stiffness matrix (`K_ff`). A condition number check (`cond(K_ff) < 1e16`) is used
    to ensure numerical stability. If the matrix is well-conditioned, the system is solved and a nodal
    reaction vector is computed at the fixed DOFs.

    Parameters
    ----------
    P_global : ndarray of shape (n_dof,)
        The global load vector.

    K_global : ndarray of shape (n_dof, n_dof)
        The global stiffness matrix.

    fixed : array-like of int
        Indices of fixed degrees of freedom.

    free : array-like of int
        Indices of free degrees of freedom.

    Returns
    -------
    u : ndarray of shape (n_dof,)
        Displacement vector. Displacements are computed only for free DOFs; fixed DOFs are set to zero.

    nodal_reaction_vector : ndarray of shape (n_dof,)
        Nodal reaction vector. Reactions are computed only for fixed DOFs.

    Raises
    ------
    ValueError
        If the submatrix `K_ff` is ill-conditioned and the system cannot be reliably solved.
    """

## Your Goal:
Write pytest-style test functions that verify the correctness of the function above.

## Requirements:
- Use the exact test function names listed below
- Each test must accept a single argument: `fcn` — the function to test
- Use `assert` statements to check correctness
- Each test must include a descriptive docstring
- Do not include print statements, logging, or example usage
- Output only valid Python code — no explanations, markdown, or comments

## Function Signature:
## Test Functions to Implement:
- test_linear_solve_arbitrary_solvable_cases: "Tests that the linear solver produces correct displacements and reaction forces
for small, solvable systems.

Verifies boundary conditions, internal equilibrium, and global force balance across
multiple cases with different free/fixed DOF configurations."
- test_linear_solve_raises_on_ill_conditioned_matrix: "Verifies that `linear_solve` raises a ValueError when the submatrix `K_ff` is ill-conditioned
(i.e., its condition number exceeds 1e16), indicating that the linear system is not solvable
to a numerically reliable degree.

This test passes a deliberately singular (non-invertible) or nearly singular `K_ff` matrix
by using fixed/free DOF partitioning, and checks that the function does not proceed with
solving but instead raises the documented ValueError."

# Output:
# Only return valid pytest test functions — no prose, markdown, or commentary.
