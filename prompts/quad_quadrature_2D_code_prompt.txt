# Python Function Implementation Task

Write a Python function that matches the exact signature and docstring provided below.

## Requirements:
- Keep the function name, parameter names, and docstring exactly as shown
- Do not add any code outside the function definition
- Use only the following imports: import numpy as np
import pytest
from typing import Tuple
- You may call only the helper functions listed below — their full implementations are provided
- Do not re-implement or modify them
- Output only valid Python code (no explanations, comments, or markdown)
- Implement the functionality as described in the docstring

## Available Helper Functions:
(None)


## Function Signature:
## Only complete the function below:
def quad_quadrature_2D(num_pts: int) -> Tuple[np.ndarray, np.ndarray]:
    """
    Return Gauss–Legendre quadrature points and weights for the
    reference square Q = { (xi, eta) : -1 <= xi <= 1, -1 <= eta <= 1 }.

    Supported rules (tensor products of 1D Gauss–Legendre):
      - 1 point  : 1×1   (exact for polynomials with degree ≤1 in each variable)
      - 4 points : 2×2   (exact for degree ≤3 in each variable)
      - 9 points : 3×3   (exact for degree ≤5 in each variable)

    Parameters
    ----------
    num_pts : int
        Total number of quadrature points (1, 4, or 9).

    Returns
    -------
    points : (num_pts, 2) float64 ndarray
        Quadrature points [xi, eta] on the reference square.
    weights : (num_pts,) float64 ndarray
        Quadrature weights corresponding to `points`. The sum of weights
        equals the area of Q, which is 4.0.

    Raises
    ------
    ValueError
        If `num_pts` is not one of {1, 4, 9}.
    """

# Output:
# Only return the complete Python function — no extra text, explanation, or formatting.
