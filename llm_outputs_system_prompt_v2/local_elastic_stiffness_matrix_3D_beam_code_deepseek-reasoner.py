def local_elastic_stiffness_matrix_3D_beam(E: float, nu: float, A: float, L: float, Iy: float, Iz: float, J: float) -> np.ndarray:
    k = np.zeros((12, 12))
    G = E / (2 * (1 + nu))
    axial_stiffness = E * A / L
    torsional_stiffness = G * J / L
    k[0, 0] = axial_stiffness
    k[0, 6] = -axial_stiffness
    k[6, 0] = -axial_stiffness
    k[6, 6] = axial_stiffness
    k[3, 3] = torsional_stiffness
    k[3, 9] = -torsional_stiffness
    k[9, 3] = -torsional_stiffness
    k[9, 9] = torsional_stiffness
    bending_z_coeff = E * Iz / L ** 3
    k[1, 1] = 12 * bending_z_coeff
    k[1, 5] = 6 * L * bending_z_coeff
    k[1, 7] = -12 * bending_z_coeff
    k[1, 11] = 6 * L * bending_z_coeff
    k[5, 1] = 6 * L * bending_z_coeff
    k[5, 5] = 4 * L ** 2 * bending_z_coeff
    k[5, 7] = -6 * L * bending_z_coeff
    k[5, 11] = 2 * L ** 2 * bending_z_coeff
    k[7, 1] = -12 * bending_z_coeff
    k[7, 5] = -6 * L * bending_z_coeff
    k[7, 7] = 12 * bending_z_coeff
    k[7, 11] = -6 * L * bending_z_coeff
    k[11, 1] = 6 * L * bending_z_coeff
    k[11, 5] = 2 * L ** 2 * bending_z_coeff
    k[11, 7] = -6 * L * bending_z_coeff
    k[11, 11] = 4 * L ** 2 * bending_z_coeff
    bending_y_coeff = E * Iy / L ** 3
    k[2, 2] = 12 * bending_y_coeff
    k[2, 4] = -6 * L * bending_y_coeff
    k[2, 8] = -12 * bending_y_coeff
    k[2, 10] = -6 * L * bending_y_coeff
    k[4, 2] = -6 * L * bending_y_coeff
    k[4, 4] = 4 * L ** 2 * bending_y_coeff
    k[4, 8] = 6 * L * bending_y_coeff
    k[4, 10] = 2 * L ** 2 * bending_y_coeff
    k[8, 2] = -12 * bending_y_coeff
    k[8, 4] = 6 * L * bending_y_coeff
    k[8, 8] = 12 * bending_y_coeff
    k[8, 10] = 6 * L * bending_y_coeff
    k[10, 2] = -6 * L * bending_y_coeff
    k[10, 4] = 2 * L ** 2 * bending_y_coeff
    k[10, 8] = 6 * L * bending_y_coeff
    k[10, 10] = 4 * L ** 2 * bending_y_coeff
    return k