def local_geometric_stiffness_matrix_3D_beam(L: float, A: float, I_rho: float, Fx2: float, Mx2: float, My1: float, Mz1: float, My2: float, Mz2: float) -> np.ndarray:
    Kg = np.zeros((12, 12))
    P = Fx2
    a = P / L
    Kg[1, 1] = 6 / 5 * a
    Kg[1, 5] = a * L / 10
    Kg[1, 7] = -6 / 5 * a
    Kg[1, 11] = a * L / 10
    Kg[5, 1] = a * L / 10
    Kg[5, 5] = 2 * a * L ** 2 / 15
    Kg[5, 7] = -a * L / 10
    Kg[5, 11] = -a * L ** 2 / 30
    Kg[7, 1] = -6 / 5 * a
    Kg[7, 5] = -a * L / 10
    Kg[7, 7] = 6 / 5 * a
    Kg[7, 11] = -a * L / 10
    Kg[11, 1] = a * L / 10
    Kg[11, 5] = -a * L ** 2 / 30
    Kg[11, 7] = -a * L / 10
    Kg[11, 11] = 2 * a * L ** 2 / 15
    Kg[2, 2] = 6 / 5 * a
    Kg[2, 4] = -a * L / 10
    Kg[2, 8] = -6 / 5 * a
    Kg[2, 10] = -a * L / 10
    Kg[4, 2] = -a * L / 10
    Kg[4, 4] = 2 * a * L ** 2 / 15
    Kg[4, 8] = a * L / 10
    Kg[4, 10] = -a * L ** 2 / 30
    Kg[8, 2] = -6 / 5 * a
    Kg[8, 4] = a * L / 10
    Kg[8, 8] = 6 / 5 * a
    Kg[8, 10] = a * L / 10
    Kg[10, 2] = -a * L / 10
    Kg[10, 4] = -a * L ** 2 / 30
    Kg[10, 8] = a * L / 10
    Kg[10, 10] = 2 * a * L ** 2 / 15