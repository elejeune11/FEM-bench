{
    "function_imports": [
      "numpy"
    ],
    "compute_1d_linear_shape_functions": "import numpy as np\n\ndef compute_1d_linear_shape_functions(xi: float) -> np.ndarray:\n    \"\"\"Compute linear shape functions for a 1D two-node element.\n\n    Args:\n        xi: The local coordinate (-1 to 1).\n\n    Returns:\n        A NumPy array containing the shape function values.\n    \"\"\"\n    N1 = 0.5 * (1 - xi)\n    N2 = 0.5 * (1 + xi)\n    return np.array([N1, N2])",
    "test_imports": [
      "pytest",
      "numpy"
    ],
    "test_partition_of_unity": "import numpy as np\nimport pytest\n\n\ndef test_partition_of_unity():\n    \"\"\"Test the partition of unity property of the shape functions.\n    \"\"\"\n    from compute_1d_linear_shape_functions import compute_1d_linear_shape_functions\n    xi_values = np.linspace(-1, 1, 100)\n    for xi in xi_values:\n        shape_functions = compute_1d_linear_shape_functions(xi)\n        assert np.isclose(np.sum(shape_functions), 1.0)"
  }