{
    "function_imports": [
      "numpy"
    ],
    "compute_1d_linear_shape_functions": "def compute_1d_linear_shape_functions(xi: float) -> np.ndarray:\n    \"\"\"Compute linear shape functions for 1D two-node element.\n\n    Args:\n        xi (float): Local coordinate (-1 <= xi <= 1).\n\n    Returns:\n        numpy.ndarray: Array of shape function values [N1, N2].\n    \"\"\"\n    N1 = 0.5 * (1 - xi)\n    N2 = 0.5 * (1 + xi)\n    return np.array([N1, N2])",
    "test_imports": [
      "pytest",
      "numpy"
    ],
    "test_partition_of_unity": "def test_partition_of_unity():\n    \"\"\"Test that the shape functions sum to unity.\n    \"\"\"\n    xi_values = np.array([-1, -0.5, 0, 0.5, 1])\n    for xi in xi_values:\n        N = compute_1d_linear_shape_functions(xi)\n        assert np.isclose(np.sum(N), 1.0)"
  }