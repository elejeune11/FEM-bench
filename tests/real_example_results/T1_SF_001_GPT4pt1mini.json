{
    "function_imports": [
      "numpy"
    ],
    "compute_1d_linear_shape_functions": "def compute_1d_linear_shape_functions(xi: float) -> np.ndarray:\\n    \"\"\"Compute 1D linear shape functions for a two-node element at local coordinate xi.\\n\\n    Args:\\n        xi (float): Local coordinate in the range [-1, 1].\\n\\n    Returns:\\n        np.ndarray: Array of shape (2,) containing the shape function values [N1, N2].\\n    \"\"\"\\n    N1 = 0.5 * (1 - xi)\\n    N2 = 0.5 * (1 + xi)\\n    return np.array([N1, N2])",
    "test_imports": [
      "pytest",
      "numpy"
    ],
    "test_partition_of_unity": "def test_partition_of_unity():\\n    \"\"\"Test that the sum of the linear shape functions equals 1 for various xi values.\"\"\"\\n    xis = np.linspace(-1, 1, 11)\\n    for xi in xis:\\n        N = compute_1d_linear_shape_functions(xi)\\n        assert np.isclose(N.sum(), 1), f\"Sum of shape functions at xi={xi} is not 1, got {N.sum()}\""
  }