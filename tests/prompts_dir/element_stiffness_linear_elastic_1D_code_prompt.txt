# Python Function Implementation Task

Write a Python function that matches the exact signature and docstring provided below.

## Requirements:
- Keep the function name, parameter names, and docstring exactly as shown
- Do not add any code outside the function definition
- Use only the following imports: import numpy as np
import pytest
- You may call only the helper functions listed below (if any)
- Output only valid Python code (no explanations, comments, or markdown)
- Implement the functionality as described in the docstring

## Available Helper Functions:
def gauss_quadrature_1D(n: int) -> np.ndarray:
    """
    Return Gauss points and weights for 1D quadrature over [-1, 1].

    Parameters:
        n (int): Number of Gauss points (1, 2, or 3 recommended)

    Returns:
        np.ndarray[np.ndarray, np.ndarray]: (points, weights)
    """

def shape_function_derivatives_1D_linear() -> np.ndarray:
    """
    Return constant derivatives of 1D linear shape functions w.r.t. ξ.

    Returns:
        np.ndarray: Derivatives [dN1/dξ, dN2/dξ]
    """

def compute_jacobian_1D(dN_dxi: np.ndarray, x_elem: np.ndarray) -> float:
    """
    Compute the Jacobian for 1D isoparametric mapping.

    Parameters:
        dN_dxi (np.ndarray): Shape function derivatives w.r.t. ξ
        x_elem (np.ndarray): Nodal coordinates of the current element [x1, x2]

    Returns:
        float: Jacobian dx/dξ
    """
## Function Signature:
def element_stiffness_linear_elastic_1D(x_elem: np.ndarray, E: float, A: float, n_gauss: int) -> np.ndarray:
    """
    Compute the element stiffness matrix for a 1D linear bar using the Galerkin method.

    Parameters:
        x_elem (np.ndarray): Nodal coordinates of the element [x1, x2]
        E (float): Young's modulus
        A (float): Cross-sectional area
        n_gauss (int): Number of Gauss integration points (default = 2)

    Returns:
        np.ndarray: 2x2 element stiffness matrix
    """
