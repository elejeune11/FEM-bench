# Python Task: Write Pytest Tests for a Function

Below is the function you are testing. Use its signature and docstring to understand its behavior.

## Function Signature:
def element_stiffness_linear_elastic_1D(x_elem: np.ndarray, E: float, A: float, n_gauss: int) -> np.ndarray:
    """
    Compute the element stiffness matrix for a 1D linear bar using the Galerkin method.

    Parameters:
        x_elem (np.ndarray): Nodal coordinates of the element [x1, x2]
        E (float): Young's modulus
        A (float): Cross-sectional area
        n_gauss (int): Number of Gauss integration points (default = 2)

    Returns:
        np.ndarray: 2x2 element stiffness matrix
    """

## Your Goal:
Write pytest-style test functions that verify the correctness of the function above.

## Requirements:
- Use the exact test function names listed below
- Each test must accept a single argument: `fcn` — the function to test
- Use `assert` statements to check correctness
- Each test must include a descriptive docstring
- Do not include print statements, logging, or example usage
- Output only valid Python code — no explanations, markdown, or comments

## Test Functions to Implement:
- test_element_stiffness_comprehensive: "Verify the correctness and robustness of the 1D linear elastic element stiffness matrix.

This test checks the following properties of the stiffness matrix computed by
`element_stiffness_linear_elastic_1D` for a two-node linear element:

1. Analytical correctness:
    - For an element of length L with modulus E and area A, the stiffness matrix should match:
      (EA/L) * [[1, -1], [-1, 1]]

2. Shape and symmetry:
    - The stiffness matrix must be 2x2 and symmetric.

3. Singularity:
    - The matrix should be singular (zero determinant) for an unconstrained single element,
      reflecting rigid body motion.

4. Integration consistency:
    - The result must be identical (within numerical tolerance) for 1-, 2-, and 3-point
      Gauss quadrature rules when applied to linear elements, since exact integration is achieved."

# Output:
# One or more valid pytest functions matching the names and purposes above
