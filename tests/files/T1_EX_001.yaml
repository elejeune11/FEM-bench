task_id: "T1_EX_001"
category: "shape_functions"
subcategory: "composite"
title: "Multi-Element Shape Function Analysis"
short_description: "Analyze shape functions using two dependency functions"
version: "1.0"
created_date: "2025-06-23"
created_by: "elejeune11"

prompt_description: |
  Implement a function that combines or analyzes results from 1D linear and quadratic shape functions.

  You may call `compute_1d_linear_shape_functions` and `compute_1d_quadratic_shape_functions`
  from your implementation.

expected_function_name: "analyze_shape_function_set"
include_tests: true
expected_test_functions:
  - "test_linear_usage"
  - "test_quadratic_usage"

function_signature:
  input_parameters:
    - name: "xi"
      type: "float"
      shape: ""
    - name: "analysis_type"
      type: "str"
      shape: ""
  return_parameters:
    - name: "results"
      type: "dict"
      shape: ""

task_dependencies:
  required_functions:
    - function_name: "compute_1d_linear_shape_functions"
      source_task: "T1_SF_001"
    - function_name: "compute_1d_quadratic_shape_functions"
      source_task: "T1_SF_002"

reference_solution:
  code: |
    def analyze_shape_function_set(xi, analysis_type):
        linear = compute_1d_linear_shape_functions(xi)
        quadratic = compute_1d_quadratic_shape_functions(xi)
        if analysis_type == "max":
            return {"linear_max": float(max(linear)), "quadratic_max": float(max(quadratic))}
        elif analysis_type == "sum":
            return {"linear_sum": float(sum(linear)), "quadratic_sum": float(sum(quadratic))}
        else:
            return {"linear": linear.tolist(), "quadratic": quadratic.tolist()}

failure_examples: {}

reference_verification:
  test_cases: []

test_efficacy_verification:
  expected_failures: []
