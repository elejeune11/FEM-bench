task_id: "T1_EX_001"
category: "examples"
subcategory: "multi_dependency"
title: "Shape Function Comparison Example"
short_description: "Compare different shape functions for analysis"
version: "1.0"
created_date: "2025-06-04"
created_by: "elejeune11"

prompt: |
  Implement a function that compares linear and quadratic shape functions.
  
  This function should:
  - Use both linear and quadratic shape functions from previous tasks
  - Evaluate them at given points
  - Return a comparison analysis
  
  The function demonstrates how to combine results from multiple dependency functions.

expected_function_name: "compare_shape_functions"
include_tests: true
expected_test_functions:
  - "test_comparison_at_zero"
  - "test_comparison_consistency"

function_signature:
  parameters: ["xi", "analysis_type"]
  parameter_types: ["float", "str"]
  return_shape: "dict"

task_dependencies:
  required_functions:
    - source_task: "T1_SF_001"
    - source_task: "T1_SF_002"

reference_solution:
  code: |
    def compare_shape_functions(xi, analysis_type="basic"):
        """Compare linear and quadratic shape functions."""
        linear_funcs = compute_1d_linear_shape_functions(xi)
        quadratic_funcs = compute_1d_quadratic_shape_functions(xi)
        
        if analysis_type == "basic":
            return {
                "linear": linear_funcs.tolist(),
                "quadratic": quadratic_funcs.tolist(),
                "xi": xi
            }
        elif analysis_type == "difference":
            return {
                "max_difference": np.max(np.abs(quadratic_funcs[:2] - linear_funcs)),
                "xi": xi
            }
        else:
            return {"error": "Unknown analysis type"}

failure_examples: {}

reference_verification:
  test_cases: []

test_efficacy_verification:
  expected_failures: []