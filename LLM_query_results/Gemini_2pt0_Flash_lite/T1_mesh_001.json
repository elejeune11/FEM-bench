{
    "function_imports": [
      "numpy"
    ],
    "linear_uniform_mesh_1D": "import numpy as np\n\ndef linear_uniform_mesh_1D(x_min: float, x_max: float, num_elements: int):\n    \"\"\"Generates a 1D finite element mesh with uniform spacing.\n\n    Args:\n        x_min: The starting coordinate.\n        x_max: The ending coordinate.\n        num_elements: The number of elements.\n\n    Returns:\n        A tuple containing:\n            - node_coords: A 1D numpy array of node coordinates.\n            - element_connectivity: A 2D numpy array of element connectivity.\n    \"\"\"\n    node_coords = np.linspace(x_min, x_max, num_elements + 1)\n    element_connectivity = np.array([[i, i + 1] for i in range(num_elements)])\n    return node_coords, element_connectivity",
    "test_imports": [
      "pytest",
      "numpy"
    ],
    "test_linear_uniform_mesh_1D": "import numpy as np\nimport pytest\n\n\n\ndef test_linear_uniform_mesh_1D():\n    # Test case 1\n    x_min = 0.0\n    x_max = 1.0\n    num_elements = 2\n    node_coords, element_connectivity = linear_uniform_mesh_1D(x_min, x_max, num_elements)\n    assert len(node_coords) == num_elements + 1\n    assert len(element_connectivity) == num_elements\n    assert np.allclose(node_coords, np.array([0.0, 0.5, 1.0]))\n    assert np.array_equal(element_connectivity, np.array([[0, 1], [1, 2]]))\n\n    # Test case 2\n    x_min = -1.0\n    x_max = 1.0\n    num_elements = 4\n    node_coords, element_connectivity = linear_uniform_mesh_1D(x_min, x_max, num_elements)\n    assert len(node_coords) == num_elements + 1\n    assert len(element_connectivity) == num_elements\n    assert np.allclose(node_coords, np.array([-1.0, -0.5, 0.0, 0.5, 1.0]))\n    assert np.array_equal(element_connectivity, np.array([[0, 1], [1, 2], [2, 3], [3, 4]]))\n\n    # Test case 3: single element\n    x_min = 0.0\n    x_max = 1.0\n    num_elements = 1\n    node_coords, element_connectivity = linear_uniform_mesh_1D(x_min, x_max, num_elements)\n    assert len(node_coords) == num_elements + 1\n    assert len(element_connectivity) == num_elements\n    assert np.allclose(node_coords, np.array([0.0, 1.0]))\n    assert np.array_equal(element_connectivity, np.array([[0, 1]]))\n"
  }