{
    "function_imports": [
      "numpy"
    ],
    "assemble_global_stiffness_matrix_linear_elastic_1D": "import numpy as np\n\ndef assemble_global_stiffness_matrix_linear_elastic_1D(node_coords: np.ndarray, element_connectivity: np.ndarray, E_vector: np.ndarray, A_vector: np.ndarray, n_gauss: int) -> np.ndarray:\n    \"\"\"\n    Assembles the global stiffness matrix from element contributions for a 1D finite element mesh.\n\n    Args:\n        node_coords (np.ndarray): (n_nodes,) array of node coordinates.\n        element_connectivity (np.ndarray): (n_elements, 2) array, each row\n            containing the global node indices for an element.\n        E_vector (np.ndarray): (n_elements,) array of Young's moduli for each element.\n        A_vector (np.ndarray): (n_elements,) array of cross-sectional areas for each element.\n        n_gauss (int): Number of Gauss points to use for numerical integration.\n\n    Returns:\n        np.ndarray: (n_nodes, n_nodes) global stiffness matrix.\n    \"\"\"\n    n_nodes = len(node_coords)\n    K_global = np.zeros((n_nodes, n_nodes))\n    from T1_FE_003 import element_stiffness_linear_elastic_1D\n    for i, element in enumerate(element_connectivity):\n        node1 = element[0]\n        node2 = element[1]\n        x_elem = np.array([node_coords[node1], node_coords[node2]])\n        E = E_vector[i]\n        A = A_vector[i]\n        K_elem = element_stiffness_linear_elastic_1D(x_elem, E, A, n_gauss)\n        K_global[node1, node1] += K_elem[0, 0]\n        K_global[node1, node2] += K_elem[0, 1]\n        K_global[node2, node1] += K_elem[1, 0]\n        K_global[node2, node2] += K_elem[1, 1]\n\n    return K_global",
    "test_imports": [
      "pytest",
      "numpy"
    ],
    "test_global_stiffness_single_element": "import pytest\nimport numpy as np\nfrom assemble_global_stiffness_matrix_linear_elastic_1D import assemble_global_stiffness_matrix_linear_elastic_1D\n\ndef test_global_stiffness_single_element():\n    \"\"\"\n    Tests the assembly of the global stiffness matrix for a single element.\n    \"\"\"\n    node_coords = np.array([0.0, 1.0])\n    element_connectivity = np.array([[0, 1]])\n    E_vector = np.array([210e9])  # Pa\n    A_vector = np.array([1e-3])  # m^2\n    n_gauss = 2\n\n    K_global = assemble_global_stiffness_matrix_linear_elastic_1D(node_coords, element_connectivity, E_vector, A_vector, n_gauss)\n    \n    # Expected K based on element_stiffness_linear_elastic_1D (which is tested elsewhere) and hand calculations\n    expected_K = np.array([[210e5, -210e5], [-210e5, 210e5]])\n    \n    assert np.allclose(K_global, expected_K)\n",
    "test_global_stiffness_two_elements": "import pytest\nimport numpy as np\nfrom assemble_global_stiffness_matrix_linear_elastic_1D import assemble_global_stiffness_matrix_linear_elastic_1D\n\ndef test_global_stiffness_two_elements():\n    \"\"\"\n    Tests the assembly of the global stiffness matrix for two elements.\n    \"\"\"\n    node_coords = np.array([0.0, 0.5, 1.0])\n    element_connectivity = np.array([[0, 1], [1, 2]])\n    E_vector = np.array([210e9, 210e9])  # Pa\n    A_vector = np.array([1e-3, 1e-3])  # m^2\n    n_gauss = 2\n\n    K_global = assemble_global_stiffness_matrix_linear_elastic_1D(node_coords, element_connectivity, E_vector, A_vector, n_gauss)\n\n    # Expected K. Element 1 goes from 0 to 0.5, element 2 goes from 0.5 to 1.0\n    K1 = np.array([[420e5, -420e5], [-420e5, 420e5]]) # stiffness for element 1, L=0.5, E=210e9, A=1e-3\n    K2 = np.array([[420e5, -420e5], [-420e5, 420e5]]) # stiffness for element 2, L=0.5, E=210e9, A=1e-3\n    expected_K = np.array([\n        [420e5, -420e5, 0],\n        [-420e5, 840e5, -420e5],\n        [0, -420e5, 420e5]\n    ])\n\n    assert np.allclose(K_global, expected_K)\n",
    "test_global_stiffness_properties": "import pytest\nimport numpy as np\nfrom assemble_global_stiffness_matrix_linear_elastic_1D import assemble_global_stiffness_matrix_linear_elastic_1D\n\ndef test_global_stiffness_properties():\n    \"\"\"\n    Tests properties of the assembled global stiffness matrix, such as symmetry.\n    \"\"\"\n    node_coords = np.array([0.0, 0.5, 1.0])\n    element_connectivity = np.array([[0, 1], [1, 2]])\n    E_vector = np.array([210e9, 210e9])\n    A_vector = np.array([1e-3, 1e-3])\n    n_gauss = 2\n\n    K_global = assemble_global_stiffness_matrix_linear_elastic_1D(node_coords, element_connectivity, E_vector, A_vector, n_gauss)\n\n    # Check symmetry\n    assert np.allclose(K_global, K_global.T)\n\n    # Check that the sum of each row equals zero (for a free-free boundary condition and uniform E,A) - needs to be true because there are no fixed BCs \n    for row in K_global:\n      assert np.isclose(np.sum(row), 0.0) # sum of rows should ideally be zero in case of free-free setup"
  }