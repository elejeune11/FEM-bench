{
    "function_imports": [
      "numpy"
    ],
    "assign_element_props_linear_elastic_1D": "import numpy as np\n\ndef assign_element_props_linear_elastic_1D(prop_list: list[dict[str, float]], node_coords: np.ndarray, element_connectivity: np.ndarray) -> np.ndarray:\n    \"\"\"Assign linear elastic material properties (E, A) to 1D finite elements.\n\n    Args:\n        prop_list: List of material property dictionaries.\n            Each dictionary must contain:\n                \"coord_min\": float,\n                \"coord_max\": float,\n                \"E\": float,\n                \"A\": float\n        node_coords: Coordinates of the nodes.\n        element_connectivity: Connectivity of the elements.\n\n    Returns:\n        A NumPy array of shape (number of elements, 2) where each row\n        contains [E, A] for an element.\n    \"\"\"\n    num_elements = element_connectivity.shape[0]\n    element_props = np.zeros((num_elements, 2))\n\n    for i in range(num_elements):\n        element_nodes = element_connectivity[i]\n        element_coords = node_coords[element_nodes]\n        element_center = np.mean(element_coords)\n\n        assigned = False\n        for prop in prop_list:\n            if prop[\"coord_min\"] <= element_center <= prop[\"coord_max\"]:\n                element_props[i, 0] = prop[\"E\"]\n                element_props[i, 1] = prop[\"A\"]\n                assigned = True\n                break  # First match wins\n\n        if not assigned:\n            raise ValueError(f\"Element {i} not assigned to any material region.\")\n\n    return element_props",
    "test_imports": [
      "pytest",
      "numpy"
    ],
    "test_single_material_region": "import pytest\nimport numpy as np\nfrom typing import List, Dict\n\ndef test_single_material_region():\n    prop_list: List[Dict[str, float]] = [\n        {\"coord_min\": 0.0, \"coord_max\": 1.0, \"E\": 200e9, \"A\": 0.01}\n    ]\n    node_coords = np.array([0.0, 1.0, 2.0])\n    element_connectivity = np.array([[0, 1], [1, 2]])\n\n    element_props = assign_element_props_linear_elastic_1D(prop_list, node_coords, element_connectivity)\n\n    assert np.allclose(element_props, np.array([[200e9, 0.01], [200e9, 0.01]]))\n",
    "test_multiple_material_regions": "import pytest\nimport numpy as np\nfrom typing import List, Dict\n\ndef test_multiple_material_regions():\n    prop_list: List[Dict[str, float]] = [\n        {\"coord_min\": 0.0, \"coord_max\": 1.0, \"E\": 200e9, \"A\": 0.01},\n        {\"coord_min\": 1.0, \"coord_max\": 2.0, \"E\": 100e9, \"A\": 0.02}\n    ]\n    node_coords = np.array([0.0, 1.0, 2.0, 3.0])\n    element_connectivity = np.array([[0, 1], [1, 2], [2, 3]])\n\n    element_props = assign_element_props_linear_elastic_1D(prop_list, node_coords, element_connectivity)\n\n    assert np.allclose(element_props, np.array([[200e9, 0.01], [100e9, 0.02], [100e9, 0.02]]))\n",
    "test_boundary_conditions_and_edge_cases": "import pytest\nimport numpy as np\nfrom typing import List, Dict\n\ndef test_boundary_conditions_and_edge_cases():\n    # Overlapping regions, check \"first match wins\"\n    prop_list: List[Dict[str, float]] = [\n        {\"coord_min\": 0.0, \"coord_max\": 1.0, \"E\": 200e9, \"A\": 0.01},\n        {\"coord_min\": 0.5, \"coord_max\": 1.5, \"E\": 100e9, \"A\": 0.02}\n    ]\n    node_coords = np.array([0.0, 0.5, 1.0, 1.5])\n    element_connectivity = np.array([[0, 1], [1, 2], [2, 3]])\n\n    element_props = assign_element_props_linear_elastic_1D(prop_list, node_coords, element_connectivity)\n\n    assert np.allclose(element_props, np.array([[200e9, 0.01], [200e9, 0.01], [100e9, 0.02]]))\n\n    # Check no gap - all elements covered\n    prop_list = [\n        {\"coord_min\": 0.0, \"coord_max\": 0.5, \"E\": 200e9, \"A\": 0.01},\n        {\"coord_min\": 0.5, \"coord_max\": 1.0, \"E\": 100e9, \"A\": 0.02}\n    ]\n    node_coords = np.array([0.0, 0.5, 1.0])\n    element_connectivity = np.array([[0, 1], [1, 2]])\n\n    element_props = assign_element_props_linear_elastic_1D(prop_list, node_coords, element_connectivity)\n    assert np.allclose(element_props, np.array([[200e9, 0.01], [100e9, 0.02]]))\n\n    # Edge case: Element at the exact boundary\n    prop_list = [\n        {\"coord_min\": 0.0, \"coord_max\": 0.5, \"E\": 200e9, \"A\": 0.01},\n        {\"coord_min\": 0.5, \"coord_max\": 1.0, \"E\": 100e9, \"A\": 0.02}\n    ]\n    node_coords = np.array([0.0, 1.0])\n    element_connectivity = np.array([[0, 1]])\n\n    element_props = assign_element_props_linear_elastic_1D(prop_list, node_coords, element_connectivity)\n    assert np.allclose(element_props, np.array([[100e9, 0.02]]))\n\n    # Error case - element not covered\n    prop_list = [\n        {\"coord_min\": 0.0, \"coord_max\": 0.25, \"E\": 200e9, \"A\": 0.01}\n    ]\n    node_coords = np.array([0.0, 0.5, 1.0])\n    element_connectivity = np.array([[0, 1], [1, 2]])\n    with pytest.raises(ValueError, match=\"Element 1 not assigned to any material region.\"):\n        assign_element_props_linear_elastic_1D(prop_list, node_coords, element_connectivity)\n\n\n"
  }