{
    "function_imports": [
      "numpy",
      "typing"
    ],
    "assemble_global_body_force_vector_linear_elastic_1D": "import numpy as np\nfrom typing import Callable\n\ndef assemble_global_body_force_vector_linear_elastic_1D(node_coords: np.ndarray, element_connectivity: np.ndarray, body_force_fn: Callable[[float], float], n_gauss: int) -> np.ndarray:\n    \"\"\"\n    Assemble the global body force vector from element contributions for a 1D finite element mesh.\n\n    Args:\n        node_coords: Coordinates of the nodes (n_nodes,)\n        element_connectivity: Connectivity matrix, each row defines an element (n_elements, 2)\n        body_force_fn: Function that returns the body force at a given point\n        n_gauss: Number of Gauss points to use for numerical integration\n\n    Returns:\n        The global body force vector (n_nodes,)\n    \"\"\"\n    n_nodes = node_coords.shape[0]\n    global_body_force_vector = np.zeros(n_nodes)\n\n    for element_index, element in enumerate(element_connectivity):\n        node1_index, node2_index = element\n        x_elem = np.array([node_coords[node1_index], node_coords[node2_index]])\n        element_body_force_vector = element_body_force_vector_1D(x_elem, body_force_fn, n_gauss)\n        global_body_force_vector[node1_index] += element_body_force_vector[0]\n        global_body_force_vector[node2_index] += element_body_force_vector[1]\n\n    return global_body_force_vector",
    "test_imports": [
      "pytest",
      "numpy"
    ],
    "test_global_body_force_single_element": "import numpy as np\nfrom assemble_global_body_force_vector_linear_elastic_1D import assemble_global_body_force_vector_linear_elastic_1D\n\ndef test_global_body_force_single_element():\n    \"\"\"\n    Test the assembly of the global body force vector for a single element.\n    \"\"\"\n    def body_force_fn(x):\n        return x\n\n    node_coords = np.array([0.0, 1.0])\n    element_connectivity = np.array([[0, 1]])\n    n_gauss = 2\n    global_body_force = assemble_global_body_force_vector_linear_elastic_1D(node_coords, element_connectivity, body_force_fn, n_gauss)\n    assert np.allclose(global_body_force, [1/6, 1/3], rtol=1e-5) # Expected vector is approximately [1/6, 1/3] from integration of x over [0,1] using 2-point gauss quadrature",
    "test_global_body_force_two_elements": "import numpy as np\nfrom assemble_global_body_force_vector_linear_elastic_1D import assemble_global_body_force_vector_linear_elastic_1D\n\ndef test_global_body_force_two_elements():\n    \"\"\"\n    Test the assembly of the global body force vector for two elements.\n    \"\"\"\n    def body_force_fn(x):\n        return 2*x\n\n    node_coords = np.array([0.0, 0.5, 1.0])\n    element_connectivity = np.array([[0, 1], [1, 2]])\n    n_gauss = 2\n    global_body_force = assemble_global_body_force_vector_linear_elastic_1D(node_coords, element_connectivity, body_force_fn, n_gauss)\n    assert np.allclose(global_body_force, [1/6, 1/2, 1/6], rtol=1e-5) # expected from integration of 2*x over [0, 0.5] and [0.5, 1]",
    "test_global_body_force_properties": "import numpy as np\nfrom assemble_global_body_force_vector_linear_elastic_1D import assemble_global_body_force_vector_linear_elastic_1D\n\ndef test_global_body_force_properties():\n    \"\"\"\n    Test that the global body force vector respects the properties of linear elasticity.\n    For instance, the total load should equal the sum of the body force vectors.\n    \"\"\"\n    def body_force_fn(x):\n        return 1.0 # constant body force\n\n    node_coords = np.array([0.0, 1.0, 2.0])\n    element_connectivity = np.array([[0, 1], [1, 2]])\n    n_gauss = 2\n    global_body_force = assemble_global_body_force_vector_linear_elastic_1D(node_coords, element_connectivity, body_force_fn, n_gauss)\n    total_load = np.sum(global_body_force)\n    assert np.isclose(total_load, 2.0, rtol=1e-5) # total load should match the area under constant body force"
  }