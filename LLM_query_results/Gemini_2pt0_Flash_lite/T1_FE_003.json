{
    "function_imports": [
      "numpy",
      "scipy"
    ],
    "element_stiffness_linear_elastic_1D": "import numpy as np\nfrom scipy.special import roots_legendre\n\ndef element_stiffness_linear_elastic_1D(x_elem: np.ndarray, E: float, A: float, num_gauss_pts: int) -> np.ndarray:\n    '''\n    Compute the element stiffness matrix for a 1D linear elastic bar using numerical integration and the Galerkin method.\n    \n    Args:\n        x_elem (np.ndarray): Element coordinates (2,)\n        E (float): Young's modulus\n        A (float): Cross-sectional area\n        num_gauss_pts (int): Number of Gauss points\n    \n    Returns:\n        np.ndarray: Element stiffness matrix (2, 2)\n    '''\n    # Gauss quadrature points and weights\n    gauss_pts, gauss_weights = roots_legendre(num_gauss_pts)\n    \n    # Element stiffness matrix\n    ke = np.zeros((2, 2))\n    \n    # Loop through Gauss points\n    for i in range(num_gauss_pts):\n        xi = gauss_pts[i]\n        weight = gauss_weights[i]\n        \n        # Shape function derivatives\n        dN_dxi = np.array([-0.5, 0.5]) #shape_function_derivatives_1D_linear(xi)\n        \n        # Jacobian\n        J = 0.5 * (x_elem[1] - x_elem[0]) #compute_jacobian_1D(dN_dxi, x_elem)\n        \n        # B matrix (strain-displacement matrix)\n        B = dN_dxi / J\n        \n        # Stiffness matrix contribution\n        ke += E * A * B.reshape(2, 1) @ B.reshape(1, 2) * weight * J\n    \n    return ke",
    "test_imports": [
      "pytest",
      "numpy"
    ],
    "test_stiffness_matrix_properties": "import pytest\nimport numpy as np\nfrom your_module import element_stiffness_linear_elastic_1D  # Replace your_module\n\ndef test_stiffness_matrix_properties():\n    '''\n    Test properties of the stiffness matrix.\n    '''\n    x_elem = np.array([0.0, 1.0])\n    E = 210e9  # Pa (Young's modulus of steel)\n    A = 1e-4   # m^2 (Cross-sectional area)\n    num_gauss_pts = 2\n\n    ke = element_stiffness_linear_elastic_1D(x_elem, E, A, num_gauss_pts)\n\n    # Check symmetry\n    assert np.allclose(ke, ke.T), \"Stiffness matrix is not symmetric.\"\n\n    # Check sum of rows/columns is close to zero (for internal forces)\n    assert np.allclose(np.sum(ke, axis=0), [0.0, 0.0]), \"Sum of columns is not close to zero.\"\n    assert np.allclose(np.sum(ke, axis=1), [0.0, 0.0]), \"Sum of rows is not close to zero.\"",
    "test_analytical_comparison": "import pytest\nimport numpy as np\nfrom your_module import element_stiffness_linear_elastic_1D  # Replace your_module\n\ndef test_analytical_comparison():\n    '''\n    Compare the computed stiffness matrix with the analytical solution.\n    '''\n    x_elem = np.array([0.0, 1.0])\n    E = 210e9  # Pa (Young's modulus of steel)\n    A = 1e-4   # m^2 (Cross-sectional area)\n    L = x_elem[1] - x_elem[0]\n    num_gauss_pts = 2\n\n    ke = element_stiffness_linear_elastic_1D(x_elem, E, A, num_gauss_pts)\n\n    # Analytical solution\n    ke_analytical = E * A / L * np.array([[1, -1], [-1, 1]])\n\n    assert np.allclose(ke, ke_analytical), \"Computed stiffness matrix does not match analytical solution.\"",
    "test_integration_rule_independence": "import pytest\nimport numpy as np\nfrom your_module import element_stiffness_linear_elastic_1D  # Replace your_module\n\ndef test_integration_rule_independence():\n    '''\n    Test the stiffness matrix is (approximately) independent of the number of Gauss points (for sufficient number).\n    '''\n    x_elem = np.array([0.0, 1.0])\n    E = 210e9  # Pa (Young's modulus of steel)\n    A = 1e-4   # m^2 (Cross-sectional area)\n\n    ke_2 = element_stiffness_linear_elastic_1D(x_elem, E, A, 2)\n    ke_3 = element_stiffness_linear_elastic_1D(x_elem, E, A, 3)\n\n    assert np.allclose(ke_2, ke_3, atol=1e-8), \"Stiffness matrix is not independent of Gauss point count.\""
  }