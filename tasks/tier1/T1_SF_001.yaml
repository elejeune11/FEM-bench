# Environment: Uses tier1_standard (see environments/tier1_environment.yaml)

# ============================================================================
# Task metadata
# ============================================================================
task_id: "T1_SF_001"
category: "shape_functions"
subcategory: "linear"
title: "1D Linear Shape Functions"
short_description: "Compute linear shape functions for 1D two-node element"

version: "1.0"
created_date: "2025-06-04"
created_by: "elejeune11"

# ============================================================================
# Task specification -- note this forms the main LLM prompt
# ============================================================================

prompt: |
  Implement a function to compute 1D linear shape functions for a two-node element.
  
  The function should take a parametric coordinate xi (ranging from -1 to 1) and return 
  the values of the two linear shape functions N1 and N2 at that coordinate.
  
  The shape functions should satisfy:
  - Partition of unity: N1 + N2 = 1 for all xi
  - Interpolation property: N1(-1) = 1, N1(1) = 0, N2(-1) = 0, N2(1) = 1
  - Completeness: The shape functions can represent constant and linear functions exactly
  
  Include comprehensive unit tests that verify these mathematical properties.

expected_function_name: "shape_functions_1D_linear"
include_tests: true
expected_test_functions: ["test_partition_of_unity", "test_interpolation_property", "test_completeness", "test_known_values"]

function_signature:
  parameters: ["xi"]
  parameter_types: ["float"]
  return_shape: "(2,)"

task_dependencies:
  required_functions: []

# ============================================================================
# Reference solutions and failure examples for evaluation testing
# ============================================================================

reference_solution:
  code: |
    def shape_functions_1D_linear(xi):
        """
        Compute 1D linear shape functions for a two-node element.
        
        Parameters:
        xi (float): Parametric coordinate (-1 <= xi <= 1)
        
        Returns:
        numpy.ndarray: Shape function values [N1, N2]
        """
        N1 = (1.0 - xi) / 2.0
        N2 = (1.0 + xi) / 2.0
        return np.array([N1, N2])

failure_examples:
  "wrong_signs": |
    def shape_functions_1D_linear(xi):
        # Wrong signs in the formulas
        N1 = (1.0 + xi) / 2.0  # Should be (1 - xi)
        N2 = (1.0 - xi) / 2.0  # Should be (1 + xi)
        return np.array([N1, N2])
        
  "missing_normalization": |
    def shape_functions_1D_linear(xi):
        # Missing division by 2
        N1 = 1.0 - xi
        N2 = 1.0 + xi
        return np.array([N1, N2])
        
  "returns_constants": |    
    def shape_functions_1D_linear(xi):
        # Correct formulas but wrong order
        N1 = 1.0
        N2 = 0.0
        return np.array([N1, N2])

# ============================================================================
# Evaluation configuration
# ============================================================================

reference_verification:
  test_cases:
    - input:
        xi: -1.0
      tolerance: 1e-12

    - input:
        xi: 0.0
      tolerance: 1e-12

    - input:
        xi: 1.0
      tolerance: 1e-12

    - input:
        xi: -0.5
      tolerance: 1e-12

    - input:
        xi: 0.5
      tolerance: 1e-12

    - input:
        xi: 0.25
      tolerance: 1e-12

test_efficacy_verification:
  expected_failures:
    - failure_type: "wrong_signs"
      test_function: "test_interpolation_property"
    - failure_type: "missing_normalization"
      test_function: "test_partition_of_unity"
    - failure_type: "missing_normalization"
      test_function: "test_completeness"
    - failure_type: "returns_constants"
      test_function: "test_known_values"
    - failure_type: "returns_constants"
      test_function: "test_completeness"