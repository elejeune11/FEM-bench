# ============================================================================
# Tier 1 Task Template
# ============================================================================
# Filename must match task_id: {task_id}.yaml (e.g., T1_SF_001.yaml)
# Environment: tier1_standard (see environments/tier1_standard.yaml)

# ----------------------------------------------------------------------------
# Task metadata
# ----------------------------------------------------------------------------
task_id: ""                     # Format: T1_{CATEGORY}_{###} (e.g., "T1_SF_001")
category: ""                    # e.g., "shape_functions", "integration", etc.
subcategory: ""                 # e.g., "linear", "gauss_quadrature", etc.
title: ""                       # Human-readable task name
short_description: ""           # One-line summary for UI or dashboards

version: "1.0"                  # Task definition version
created_date: "YYYY-MM-DD"      # ISO date format
created_by: ""                  # GitHub handle or email

# ----------------------------------------------------------------------------
# Task description for LLM prompting
# ----------------------------------------------------------------------------
prompt_description: |
  # Detailed description of the task for the LLM
  # Include goals, constraints, and context
  # This field is used to construct the final prompt

expected_function_name: ""       # Function the LLM must implement

function_signature:
  input_parameters:
    - name: ""                   # Parameter name
      type: ""                   # e.g., float, numpy.ndarray
      shape: ""                  # Optional shape string (e.g., (n,), (n, 2))

  return_parameters:
    - name: ""                   # Return variable name (or leave blank)
      type: ""                   # e.g., numpy.ndarray
      shape: ""                  # Optional shape string

include_tests: true              # Require unit tests from LLM
expected_test_functions:
  - ""                           # List of expected test function names

# ----------------------------------------------------------------------------
# Task dependencies (optional)
# ----------------------------------------------------------------------------
task_dependencies:
  required_functions: []
    # - function_name: "some_helper"
    #   source_task: "T1_SF_002"

# ----------------------------------------------------------------------------
# Reference implementation and known failure examples
# ----------------------------------------------------------------------------
reference_solution:
  code: |
    # Gold-standard reference implementation

failure_examples:
  # Use failure_type keys and wrap code in a 'code' field
  incorrect_loop:
    code: |
      def foo(...):
          for i in range(n):
              pass  # wrong logic

  wrong_shape:
    code: |
      def foo(...):
          return x + y.T  # shape mismatch

# ----------------------------------------------------------------------------
# Evaluation: reference-based functional correctness
# ----------------------------------------------------------------------------
reference_verification:
  test_cases:
    - input:
        param1: 1.0
        param2: [1.0, 2.0]
      tolerance: 1e-12

    - input:
        param1: 0.0
        param2: [0.0, 1.0]
      tolerance: 1e-10

# ----------------------------------------------------------------------------
# Evaluation: test function effectiveness
# ----------------------------------------------------------------------------
test_efficacy_verification:
  expected_failures:
    - failure_type: "incorrect_loop"
      test_function: "test_loop_logic"

    - failure_type: "wrong_shape"
      test_function: "test_shape_consistency"
